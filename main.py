import os
import requests
import time
import logging
from dotenv import load_dotenv
import telegram

# ====== –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ======
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")
API_1INCH_KEY = os.getenv("API_1INCH_KEY")
CHAIN_ID = 137
CHECK_INTERVAL = 180  # 3 –º–∏–Ω—É—Ç—ã

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ ======
logging.basicConfig(
    format='%(asctime)s %(levelname)s:%(message)s',
    level=logging.INFO
)

# ====== –¢–æ–∫–µ–Ω—ã (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ) ======
TOKENS = {
    "USDC": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
    "USDT": "0xc2132D05D31c914a87C6611C10748AEb04B58e8F",
    "DAI": "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063",
    "WBTC": "0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6",
    "WETH": "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
    "MATIC": "0x0000000000000000000000000000000000001010",
    # –î–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
}

# ====== –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è 1inch ======
HEADERS_1INCH = {"Authorization": f"Bearer {API_1INCH_KEY}"} if API_1INCH_KEY else {}

# ====== API ======
API_1INCH_URL = f"https://api.1inch.io/v5.0/{CHAIN_ID}/quote"
API_OPENOCEAN_URL = "https://open-api.openocean.finance/v3/137/quote"

# ====== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot ======
bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)

# ====== –§—É–Ω–∫—Ü–∏–∏ ======
def get_1inch_quote(from_token, to_token, amount):
    params = {
        "fromTokenAddress": from_token,
        "toTokenAddress": to_token,
        "amount": amount,
    }
    try:
        r = requests.get(API_1INCH_URL, params=params, headers=HEADERS_1INCH, timeout=10)
        r.raise_for_status()
        return int(r.json()["toAmount"])
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ 1inch: {e}")
        return 0

def get_openocean_quote(from_token, to_token, amount):
    params = {
        "inTokenAddress": from_token,
        "outTokenAddress": to_token,
        "amount": amount,
    }
    try:
        r = requests.get(API_OPENOCEAN_URL, params=params, timeout=10)
        r.raise_for_status()
        return int(r.json().get("data", {}).get("outAmount", "0"))
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ OpenOcean: {e}")
        return 0

def send_telegram_message(text):
    try:
        bot.send_message(chat_id=TELEGRAM_CHANNEL_ID, text=text, parse_mode=telegram.constants.ParseMode.HTML)
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def check_arbitrage():
    amount = 40 * (10**6)  # –ü—Ä–∏–º–µ—Ä: 40 USDC —Å 6 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    for from_name, from_addr in TOKENS.items():
        for to_name, to_addr in TOKENS.items():
            if from_name == to_name:
                continue

            price_1inch = get_1inch_quote(from_addr, to_addr, amount)
            price_oo = get_openocean_quote(from_addr, to_addr, amount)

            if price_1inch == 0 or price_oo == 0:
                continue

            diff_percent = ((price_oo - price_1inch) / price_1inch) * 100

            if abs(diff_percent) >= 0.5:
                direction = "–ö—É–ø–∏—Ç—å –Ω–∞ 1inch, –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ OpenOcean" if diff_percent > 0 else "–ö—É–ø–∏—Ç—å –Ω–∞ OpenOcean, –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ 1inch"
                msg = (
                    f"üî• <b>–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!</b>\n"
                    f"{direction}\n"
                    f"{from_name} ‚Üí {to_name}\n"
                    f"–¶–µ–Ω–∞ –Ω–∞ 1inch: {price_1inch}\n"
                    f"–¶–µ–Ω–∞ –Ω–∞ OpenOcean: {price_oo}\n"
                    f"–†–∞–∑–Ω–∏—Ü–∞: {diff_percent:.2f}%\n"
                    f"–û–±—ä–µ–º: 40 {from_name}"
                )
                send_telegram_message(msg)

# ====== –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ======
if __name__ == "__main__":
    while True:
        check_arbitrage()
        time.sleep(CHECK_INTERVAL)